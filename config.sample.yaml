# AltMount Configuration Sample
# Copy this file to config.yaml and modify for your setup

# WebDAV server configuration
webdav:
  port: 8080
  user: 'usenet'
  password: 'usenet'
  debug: false

# REST API configuration
api:
  prefix: '/api' # API endpoint prefix

# Database configuration
database:
  path: '/config/altmount.db' # Database for processing workflows

# Metadata filesystem configuration
metadata:
  root_path: '/config/metadata' # Directory to store metadata files (required)

# Streaming and download configuration
streaming:
  max_download_workers: 15 # Number of download workers
  max_cache_size_mb: 32 # Maximum cache size in MB for ahead download chunks (default: 32MB)

# RClone configuration (optional)
rclone:
  # Base path for rclone configuration directory
  # The rclone config file will be stored at <path>/rclone/rclone.conf
  # If empty, defaults to the same directory as this config file
  path: '' # RClone base path (defaults to config directory)

  # Encryption settings (optional for WebDAV backends)
  password: '' # Encryption password (optional)
  salt: '' # Encryption salt (optional)

  # RC (Remote Control) server configuration
  rc_enabled: false # Enable RC server connection (for cache refresh and mount operations)
                    # NOTE: RC will be automatically enabled when mount_enabled is set to true
  rc_url: '' # External RC server URL (optional, e.g., "http://localhost:5573")
             # If empty, will start internal RC server on rc_port
  rc_port: 5573 # Port for internal RC server (changed from 5572 to match production defaults)
  rc_user: 'admin' # RC authentication username
  rc_pass: 'admin' # RC authentication password
  rc_options: {} # Additional RC server options (for internal server only)
    # Examples:
    # rc-web-gui: 'true'
    # rc-web-gui-no-open-browser: 'true'

  # Mount configuration - production-optimized defaults
  mount_enabled: false # Enable RClone mount (automatically enables rc_enabled when true)
  mount_options: {} # Custom mount options (override specific settings below)

  # Mount-specific settings - matching production command defaults
  allow_other: true # Allow other users to access the mount (--allow-other)
  allow_non_empty: true # Allow mounting over non-empty directories (--allow-non-empty)
  read_only: false # Mount as read-only (false = read-write)
  timeout: '10m' # I/O timeout for mount operations (--timeout=10m)
  syslog: true # Enable syslog output (--syslog)

  # System and filesystem options
  log_level: 'INFO' # Log level for rclone operations
  uid: 1000 # User ID for file ownership (use 0 for root)
  gid: 1000 # Group ID for file ownership (use 0 for root)
  umask: '002' # File creation mask (--umask=002, allows group write)
  buffer_size: '32M' # Buffer size for file operations (--buffer-size=32M)
  attr_timeout: '1s' # Attribute timeout for FUSE (1 second)
  transfers: 4 # Number of parallel transfers

  # VFS Cache Settings - production-optimized for performance and reliability
  cache_dir: '' # VFS cache directory (empty = defaults to <rclone_path>/cache, e.g., /config/cache)
  vfs_cache_mode: 'full' # VFS cache mode: off|minimal|writes|full (--vfs-cache-mode=full)
  vfs_cache_max_size: '50G' # Maximum cache size (--vfs-cache-max-size=50G)
  vfs_cache_max_age: '504h' # Maximum cache age (--vfs-cache-max-age=504h, 21 days)
  read_chunk_size: '32M' # VFS read chunk size (--vfs-read-chunk-size=32M)
  read_chunk_size_limit: '2G' # Read chunk size limit (--vfs-read-chunk-size-limit=2G)
  vfs_read_ahead: '128M' # VFS read-ahead size (--vfs-read-ahead=128M)
  dir_cache_time: '10m' # Directory cache time (--dir-cache-time=10m)

  # Additional VFS settings (advanced configuration)
  vfs_cache_min_free_space: '1G' # Minimum free space for VFS cache
  vfs_disk_space_total: '1G' # Total disk space for VFS operations
  vfs_read_chunk_streams: 4 # Number of read chunk streams

  # Advanced settings - performance optimization
  no_mod_time: false # Don't read/write modification time (false = preserve times)
  no_checksum: false # Don't verify checksums on upload (false = verify checksums)
  async_read: true # Enable async read operations (--async-read=true)
  vfs_fast_fingerprint: false # Use fast fingerprinting for VFS
  use_mmap: false # Use memory-mapped files for reading

# Import processing configuration
import:
  max_processor_workers: 2 # Number of NZB processor workers
  queue_processing_interval_seconds: 5 # Queue processing interval in seconds

# Health monitoring configuration
health:
  enabled: true # Enable health monitoring service
  auto_repair_enabled: false # Enable automatic repair of corrupted files via ARRs (default: false)
  check_interval_seconds: 300 # Health check interval in seconds (default: 300 = 5 minutes)

# WebDAV mount path configuration
mount_path: '' # WebDAV mount path, Example: '/mnt/altmount' or '/mnt/unionfs'. Must be an absolute path starting with /

# SABnzbd-compatible API configuration
sabnzbd:
  enabled: false # Enable SABnzbd-compatible API
  complete_dir: '/altmount/completed' # The complete directory where the files will be "downloaded".
  categories: # Download categories (optional)
    - name: 'movies'
      order: 1
      priority: 0
      dir: 'movies'
    - name: 'tv'
      order: 2
      priority: 0
      dir: 'tv'

# Radarr/Sonarr arrs configuration
arrs:
  enabled: false # Enable arrs service
  radarr_instances: [] # Radarr instances (configured via UI)
  sonarr_instances: [] # Sonarr instances (configured via UI)
  # Example instance configuration (use the web UI instead):
  # radarr_instances:
  #   - name: "radarr-main"
  #     url: "http://localhost:7878"
  #     api_key: "your-radarr-api-key"
  #     enabled: true
  # sonarr_instances:
  #   - name: "sonarr-main"
  #     url: "http://localhost:8989"
  #     api_key: "your-sonarr-api-key"
  #     enabled: true

# Logging configuration with rotation support
log:
  file: '/config/altmount.log' # Log file path (empty = console only, defaults to same directory as config file)
  level: 'info' # Log level: debug, info, warn, error
  max_size: 100 # Maximum size in MB before rotation
  max_age: 30 # Maximum age in days to keep old files
  max_backups: 10 # Maximum number of old files to keep
  compress: true # Compress old log files

# Global log level (legacy - use log.level instead)
log_level: 'info'

# NNTP Providers Configuration
# Configure multiple providers for redundancy and load balancing
providers:
  # Primary provider with SSL
  - name: 'primary-ssl'
    host: 'ssl-news.provider.com' # Replace with your provider's SSL hostname
    port: 563
    username: 'your_username' # Replace with your username
    password: 'your_password' # Replace with your password
    max_connections: 20
    tls: true
    insecure_tls: false

  # Backup provider without SSL
  - name: 'backup-standard'
    host: 'news.provider.com' # Replace with your provider's standard hostname
    port: 119
    username: 'your_username' # Replace with your username
    password: 'your_password' # Replace with your password
    max_connections: 10
    tls: false
    insecure_tls: false

  # Secondary provider (optional)
  # - name: "secondary-provider"
  #   host: "news.otherprovider.com"
  #   port: 563
  #   username: "other_username"
  #   password: "other_password"
  #   max_connections: 15
  #   tls: true
  #   insecure_tls: false
# Configuration Notes:
#
# 1. REST API:
#    - Provides HTTP endpoints for queue, health, and configuration management
#    - Available at http://server:port/api/ when enabled
#    - Optional authentication using same credentials as WebDAV
#    - Supports JSON responses with pagination and filtering
#
# 2. Architecture:
#    - Uses filesystem-based metadata instead of main database
#    - Queue database still used for processing workflows and scraper data
#    - Better performance and scalability than database approach
#
# 3. NNTP Providers:
#    - At least one provider must be configured for download functionality
#    - Multiple providers provide redundancy and load balancing
#    - SSL/TLS is recommended when available (port 563)
#    - Standard unencrypted connections typically use port 119
#
# 4. Max Connections:
#    - Set based on your provider's limits
#    - More connections = faster downloads but higher resource usage
#    - Typical range: 10-50 connections per provider
#
# 5. Workers:
#    - Download workers: Number of concurrent download threads (streaming section)
#    - Import processor workers: Number of NZB processing threads
#    - Adjust based on your system resources and provider limits
#
# 6. Streaming Configuration:
#    - Max Range Size: Maximum size for a single HTTP range request
#    - Streaming Chunk Size: Size of chunks when streaming files
#    - Max Download Workers: Number of concurrent download workers
#
# 7. RClone Integration:
#    - Enable RClone mount for WebDAV filesystem mounting
#    - RC (Remote Control) server provides full control over mount operations
#    - Automatic health monitoring and recovery
#    - Optional encryption with password and salt
#    - Mount options allow customization (vfs-cache-mode, buffer-size, etc.)
#    - RC server runs on configurable port with authentication
#    - Legacy VFS configuration maintained for backward compatibility
#
# 8. Health Monitoring:
#    - Provides system health checks and monitoring
#    - Monitors database, metadata, providers, and VFS status
#    - Accessible via REST API endpoints
#    - Auto-repair: When enabled, automatically triggers ARRs to re-download corrupted files
#
# 9. SABnzbd Compatibility:
#    - Provides SABnzbd-compatible API endpoints
#    - Configure mount directory where WebDAV will be accessible
#    - Optional download categories for organization
#    - Enable for integration with existing download clients
#
# 10. Mount Path:
#     - Global WebDAV mount path configuration
#     - Used by ARRs service to strip mount prefix from file paths
#     - Must be an absolute path when ARRs is enabled
#     - Example: '/mnt/altmount' or '/mnt/unionfs'
#
# 11. Scraper Service:
#     - Automatically index files from Radarr and Sonarr instances
#     - Configure multiple instances of each service type
#     - Customizable scrape intervals (default 24 hours)
#     - Manage instances through the web interface
#     - Indexes movie and TV episode file paths for fast searching
#
# 12. Paths:
#     - Use absolute paths for production deployments
#     - Relative paths are relative to the working directory
#     - Ensure the application has read/write access to all paths
#     - Metadata directory will be created automatically
#
# 13. Logging Configuration:
#     - Log file defaults to same directory as config file (e.g., "altmount.log")
#     - Set 'file' to custom path for different location (e.g., "./logs/altmount.log")
#     - Leave 'file' empty to log to console only
#     - Log rotation prevents disk space issues in production
#     - Old files are automatically compressed when 'compress: true'
#     - Supports backward compatibility with top-level 'log_level'
#
# 14. Security:
#     - Store credentials securely
#     - Consider using environment variables for sensitive data
#     - Use strong passwords for WebDAV authentication
#     - API keys for Radarr/Sonarr should be kept secure
